var paraCoordsYear, paraYears, yScale, dimensions;

function createGiiVis(id){
  var dataurl = $(id).data('url');
  $.ajax({
    type: 'GET',
    contentType: 'application/json; charset=utf-8',
    url: dataurl,
    dataType: 'json',
    success: function (data) {
      initGiiVis(id, data);
      $(".loading-left").fadeOut("slow");
    },
    error: function (result) {
      console.log('Error');
    }
  });
}

function initGiiVis(id, data) {
  // Define height, width and margins of visualisation
  var margin = { top: 60, right: 10, bottom: 10, left: 0};
  var width = $(".gii-vis-container").width() - margin.right - margin.left;
  var height = 550 - margin.top - margin.bottom;

  // Define scale
  var xScale = d3.scale.ordinal().rangePoints([0, width], 1),
  colorScale = d3.scale.category10(),
  dragging = {};
  yScale = {};

  var line = d3.svg.line();
  var axis = d3.svg.axis().orient("left");
  var background, foreground;

  // Set most recent year
  paraCoordsYear = d3.max(data, function(d) {
    return d.year;
  });
  paraYears = getGIIYears(data);

  // Svg for the parallel coordinates graph
  var paraSvg = d3.select(id).append("svg")
  .attr("width", width + margin.right + margin.left)
  .attr("height", height + margin.top + margin.bottom)
  .append("g")
  .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
  .attr("id", "paraSvg");

  // Tooltip to display country labels
  var toolTip = d3.select("body").append("div")
  .attr("class", "tooltip")
  .style("opacity", 0);

  // Define drag behaviour for dimensions (adopted from: http://bl.ocks.org/ABSegler/9791707)
  var onDrag = d3.behavior.drag()
  .on("dragstart", function(d) {
    dragging[d] = this.__origin__ = xScale(d);
  })
  .on("drag", function(d) {
    dragging[d] = Math.min(width, Math.max(0, this.__origin__ += d3.event.dx));
    foreground.attr("d", path);
    dimensions.sort(function(a, b) { return position(a) - position(b); });
    xScale.domain(dimensions);
    g.attr("transform", function(d) { return "translate(" + position(d) + ")"; })
  })
  .on("dragend", function(d) {
    delete this.__origin__;
    delete dragging[d];
    transition(d3.select(this)).attr("transform", "translate(" + xScale(d) + ")");
    transition(foreground).attr("d", path);
  });

  // Extract dimensions and create a scale for each
  xScale.domain(dimensions = d3.keys(data[0]).filter(function(d) {
    scale = (d == "Gender Inequality Index")? [1, 0]: [0, 100];
    return d != "year" && d != "region" && d != "code" && d != "country" &&
    (yScale[d] = d3.scale.linear()
    .domain(scale)
    .range([height, 0]));
  }));

  // Coloured by region. Lines displayed in the foreground
  foreground = paraSvg.append("g")
  .attr("class", "foreground")
  .selectAll("path")
  .data(data)
  .enter().append("path")
  .attr("d", path)
  .attr("class", getElemClass)
  .style("stroke", function(d) { return colorScale(d.region); })
  .style("stroke-opacity", 0.7)
  .style("display", "none")
  .on("mouseover", function(d){
    // Make line darker and thicker
    d3.select(this)
    .style("stroke-opacity", 1)
    .style("stroke-width", "3px");

    showParaCoordsTooltip(d, toolTip);
  })
  .on("mousemove", function(d){
    moveParaCoordsTooltip(toolTip);
  })
  .on("mouseout", function(d){
    d3.select(this)
    .style("stroke-opacity", 0.7)
    .style("stroke-width", "1px");
    hideParaCoordsTooltip(toolTip);
  });

  // Add group for each data dimension
  var g = paraSvg.selectAll(".dimension")
  .data(dimensions)
  .enter().append("g")
  .attr("class", "dimension")
  .attr("transform", function(d) { return "translate(" + xScale(d) + ")"; })
  .call(onDrag);

  // Add axis labels
  var axislabel = g.append("g")
  .attr("class", "axis");

  axislabel.each(function(d) {
    d3.select(this).call(axis.scale(yScale[d]));
  })
  .append("svg:image")
  .attr("xlink:href",  function(d) { return getImgAndHelpText(d)[0];})
  .attr("x", -8)
  .attr("y", -(margin.top/2))
  .attr("height", 16)
  .attr("width", 16)
  .on("mouseover", function(d){
    var txt = getImgAndHelpText(d)[1];
    toolTip
    .style("top", 2*margin.top + "px")
    .style("left", (d3.event.pageX - 100) + "px");
    toolTip.text(txt);
    toolTip.style("opacity", 1);
  })
  .on("mouseout", function(d){
    toolTip.style("opacity", 0);
  });

  axislabel.each(function(d) {
    d3.select(this).call(axis.scale(yScale[d]));
  })
  .append("text")
  .attr("class", "gii-axis-title")
  .attr("text-anchor", "middle")
  .attr("y", -2*(margin.top/3))
  .text(String);

  // Create brush elements to allow dynamic filtering of each dimension
  g.append("g")
  .attr("class", "brush")
  .each(function(d) {
    d3.select(this).call(yScale[d].brush = d3.svg.brush().y(yScale[d])
    .on("brushstart", brushstart)
    .on("brush", brush));
  })
  .selectAll("rect")
  .attr("x", -8)
  .attr("width", 16);

  function position(d) {
    var v = dragging[d];
    return v == null ? xScale(d) : v;
  }

  // Returns the path for given data
  function path(d) {
    return line(dimensions.map(function(p) { return [position(p), yScale[p](d[p])]; }));
  }

  updateParaCoordsYear();
  createGIILegend(colorScale, data);
}

// Brush event - toggle foreground lines
function brush() {
  var actives = dimensions.filter(function(p) { return !yScale[p].brush.empty(); }),
  extents = actives.map(function(p) { return yScale[p].brush.extent(); });
  d3.selectAll(".foreground path").style("display", function(d) {
    var inRange = actives.every(function(p, i) {
     return extents[i][0] <= d[p] && d[p] <= extents[i][1];
    }) ? true : false;
    if (inRange){
      // Check year and region selection
      var selectedRegion = d3.select("#legend_" + reduceString(d.region)).classed("disabled");
      return (paraCoordsYear == d.year && !selectedRegion)? null : "none";
    } else {
      return "none";
    }
  });
}
