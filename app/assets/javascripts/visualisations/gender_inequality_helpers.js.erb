function getElemClass(d) { return "dataLines code_" + d.code + " year_" + d.year + " region_" + reduceString(d.region); }
function reduceString(s) { return s.replace(/[^a-zA-Z0-9]/g, ""); }

function showParaCoordsTooltip(msg, toolTip){
  toolTip
  .style("top", (d3.event.pageY - 10) + "px")
  .style("left", (d3.event.pageX + 10) + "px");
  toolTip.text(msg);
  toolTip.style("opacity", 1);
}

function hideParaCoordsTooltip(toolTip){
  toolTip.style("opacity", 0);
}

function moveParaCoordsTooltip(toolTip){
  toolTip
  .style("top", (d3.event.pageY - 10) + "px")
  .style("left", (d3.event.pageX + 10) + "px");
}

// Make sure brushing doesn't start dragging action
function brushstart() {
  d3.event.sourceEvent.stopPropagation();
}

function transition(g) {
  return g.transition().duration(500);
}

function updateParaCoordsYear(){
  d3.selectAll(".dataLines").transition()
  .duration(350)
  .style("opacity", 0)
  .call(endall, function(){
    // Reset all lines
    d3.selectAll(".dataLines")
    .style("display", "none");

    // Display year lines
    d3.selectAll(".year_" + paraCoordsYear).style("display", "");

    // Turn off display for lines where region is disabled
    d3.selectAll(".legend").data().forEach(function (d) {
      var display = d3.select("#legend_" + reduceString(d)).classed("disabled")? "none": null;
      d3.selectAll(".region_" + reduceString(d)).style("display", display);
    });

    // Make sure brush selection still matches
    brush();

    // Do a nice transition to display lines
    d3.selectAll(".year_" + paraCoordsYear).transition()
    .duration(350)
    .style("opacity", 1);
  });
}

function createGIILegend(colorScale, data){
  var width = $(".gii-filter-container").width();
  var height = 170;
  var legendRectSize = 16;
  var legendSpacing = 3;

  var svg = d3.select("#region-filters").append("svg")
  .attr("width", width)
  .attr("height", height);

  var legend = svg.selectAll('.legend')
  .data(colorScale.domain())
  .enter().append('g')
  .attr('class', 'legend')
  .attr('transform', function(d, i) {
    var height = legendRectSize + legendSpacing;
    var vert = i * height * 1.5;
    return 'translate(0,' + vert + ')';
  });

  legend.append('rect')
  .attr('width', legendRectSize)
  .attr('height', legendRectSize)
  .style('fill', colorScale)
  .style('stroke', colorScale)
  .attr("class", "region-legend")
  .attr("id", function(d) {
    return "legend_" + reduceString(d);
  })
  .on('click', function (label) {
    // Get the element we clicked on and toggle it and react to data selection
    var selected = d3.select(this).classed("disabled");
    d3.select(this).classed("disabled", !selected);
    data.forEach (function (d) {
      if (d.region == label) {
        var display = selected? "" : "none";
        d3.selectAll(".year_" + paraCoordsYear).filter(" .region_" + reduceString(label)).style("display", display);
      }
    });

    // Make sure brush selection still matches
    brush();
  });

  legend.append('text')
  .attr('x', legendRectSize + legendSpacing)
  .attr('y', legendRectSize - legendSpacing)
  .text(function(d) { return d; });
}

function clearParaCoordsSelections(){
  d3.selectAll('.coord-selected').classed("coord-selected", false);
}

function selectParaCoordsCountry(code, selected){
  d3.selectAll(".code_" + code).classed("coord-selected", selected);
}

function getGIIYears(data){
  return unique(data.map(function(d){return d.year}))
}

function unique(x) {
  return x.reverse().filter(function (e, i, x) {return x.indexOf(e, i+1) === -1;}).reverse();
}

function getImgAndHelpText(label){
  switch (label) {
  case "Gender Inequality Index":
    return ["<%= asset_path( 'help.svg' ) %>", "Indicator of loss in potential human development due to inequalities between female and male achievements in political and economic areas."];
  case "Secondary Education Male":
    return ["<%= asset_path( 'help.svg' ) %>", "% of male population (aged 25+) with at least some secondary education"];
  case "Secondary Education Female":
    return ["<%= asset_path( 'help.svg' ) %>", "% of female population (aged 25+) with at least some secondary education"];
  case "Labour Force Male":
    return ["<%= asset_path( 'help.svg' ) %>", "% of male population (aged 15+) in the labour force"];
  case "Labour Force Female":
    return ["<%= asset_path( 'help.svg' ) %>", "% of female population (aged 15+) in the labour force"];;
  default:
    return ["<%= asset_path( 'help.svg' ) %>", "Share of seats in national parliament held by women"];
  }
}
